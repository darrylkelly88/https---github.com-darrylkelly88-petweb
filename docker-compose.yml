version: '3.1'

services:
  
  # NGINX Proxy Manager
  # Proxies between various containers
  #
  # https://github.com/NginxProxyManager/nginx-proxy-manager
  nginx-proxy-manager:
    container_name: nginx
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      # Mysql/Maria connection parameters:
      DB_MYSQL_HOST: "npm_db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - npm_db
    networks:
      - npm_db_network
      - web_network

  npm_db:
    container_name: npm_db_container
    image: 'jc21/mariadb-aria:latest'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - npm_db:/var/lib/mysql
    networks:
      - npm_db_network

  # Wordpress Site
  # Hosts the website
  #
  # https://hub.docker.com/_/wordpress
  wordpress:
    depends_on:
      - wp_db
    container_name: wordpress
    image: wordpress
    restart: always
    environment:
      WORDPRESS_DB_HOST: wp_db
      WORDPRESS_DB_USER: wpuser
      WORDPRESS_DB_PASSWORD: wppass
      WORDPRESS_DB_NAME: wpdb
    volumes:
      - ./PetWeb-Template:/var/www/html/wp-content/themes/PetWeb-Template
      - wordpress:/var/www/html
    networks:
      - web_network
      - wp_db_network


  wp_db:
    container_name: wp_db_container
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_DATABASE: wpdb
      MYSQL_USER: wpuser
      MYSQL_PASSWORD: wppass
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
      - wp_db:/var/lib/mysql
    networks:
      - wp_db_network

  
  
  # Mailservers
  # 
  # Documentation: https://docker-mailserver.github.io/docker-mailserver/latest/
  # https://github.com/docker-mailserver/docker-mailserver/
  mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mailserver
    # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)
    # In godaddy the name needs to be @ while the value is the defined subdomain. This means when the main domain has a look up it will return the subdomain as the mail server.
    hostname: mail.perfectpetguides.co.uk
    env_file: mailserver.env
    # More information about the mail-server ports:
    # https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/
    # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS, Authentication is DISABLED => use port 465/587 instead)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - mail-data:/var/mail/
      - mail-state:/var/mail-state/
      - mail-logs:/var/log/mail/
      - mail-config:/tmp/docker-mailserver/
      #Certs for mail server are managed by Nginx Proxy Manager. In this config it is the 6th cert it manages.
      - ./letsencrypt/live/npm-6/cert.pem:/etc/letsencrypt/live/mail.perfectpetguides.co.uk/mail.perfectpetguides.co.uk-cert.pem
      - ./letsencrypt/live/npm-6/privkey.pem:/etc/letsencrypt/live/mail.perfectpetguides.co.uk/mail.perfectpetguides.co.uk-key.pem
      #Enable container to read localtime
      - /etc/localtime:/etc/localtime:ro
    restart: always
    stop_grace_period: 1m
    # Uncomment if using `ENABLE_FAIL2BAN=1`:
    # cap_add:
    #   - NET_ADMIN
    healthcheck:
      test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
      timeout: 3s
      retries: 0


#Volumes & Netorks to create
#
#
#

volumes:
  wordpress:
  wp_db:
  npm_db:
  mail-data:
  mail-state:
  mail-logs:
  mail-config:



networks:
  web_network:
  wp_db_network:
  npm_db_network:
